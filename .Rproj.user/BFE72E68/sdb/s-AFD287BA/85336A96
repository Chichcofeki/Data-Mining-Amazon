{
    "collab_server" : "",
    "contents" : "'\nScript      : sentiment\nCreated     : March, 2015\nAuthor(s)   : iHub Research\nVersion     : v1.0\nLicense     : Apache License, Version 2.0\n\nDescription : compute the sentiment of sentence(s)\n'\nsource('util.R')\n\n# =============================================================================\n# Fetch polarity datasets and words lists\n# =============================================================================\n# get polarity datasets\nkPosText <- GetPositiveText()\nkNegText <- GetNegativeText()\n\n# get positive and negative wordlists\nkPosTerms <- GetPositiveWords()\nkNegTerms <- GetNegativeWords()\n\n\n\nComputeSentimentScores <- function(sentences){\n  # ===========================================================================\n  #     Compute sentiment score on a sentences dataframe\n  #\n  # Args:\n  #   sentences: a dataframe of sentences\n  #\n  # Returns:\n  #   scores: \n  # ===========================================================================\n  \n  scores <- laply(sentences, ComputeSentimentScore)\n  \n  return(scores)\n}\n\nComputeSentimentScore <- function(sentence, neg.terms=kNegTerms,\n                                  pos.terms=kPosTerms) {\n  # ===========================================================================\n  #            Compute the sentiment score of a sentence\n  #\n  # Args:\n  #   sentence: a string of words\n  #   neg.terms: negative wordlist\n  #   pos.terms: positive wordlist\n  #\n  # Returns:\n  #   score (): (sentence, negative_matches, positive_matches)\n  #             e.g. (\"there will be happy and a sad day\", \"1\", \"2\")\n  # ===========================================================================\n  \n  # create holder for original sentence\n  orig.sentence <- sentence\n  \n  # remove unnecessary characters using chained substitutions\n  # TODO: look into TM package for better ways of doing this\n  sentence <- tolower(gsub('\\\\d+', '', \n                           gsub('[[:cntrl:]]', '', \n                                gsub('[[:punct:]]', '', sentence))))\n  \n  # split sentence into words\n  words <- unlist(str_split(sentence, '\\\\s+'))\n  \n  # build vector with matches between words and each category\n  # and sum up the number of words in each category\n  neg.matches <- sum(!is.na(match(words, neg.terms)))\n  pos.matches <- sum(!is.na(match(words, pos.terms)))\n  \n  score <- c(orig.sentence, neg.matches, pos.matches)\n  \n  return(score)\n}\n\n# build tables of positive and negative sentences with scores\n# TODO: consider adding a neutral class\npos.results <- cbind(as.data.frame(ComputeSentimentScores(kPosText)), 'positive')\nneg.results <- cbind(as.data.frame(ComputeSentimentScores(kNegText)), 'negative')\n\ncolnames(pos.results) <- c('sentence', 'neg', 'pos', 'sentiment')\ncolnames(neg.results) <- c('sentence', 'neg', 'pos', 'sentiment')\n\ntotal.results <- rbind(pos.results, neg.results)\n\n# turn the outcome variable (last column) into a factor\n# TODO: re-think the necessity of this step\ntotal.results[,4] <- as.factor(total.results[,4])\n\n# run the naive bayes model\n#NaiveBayesClassifier <- naiveBayes(total.results[,2:3], total.results[,4])",
    "created" : 1490005757519.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "79234249",
    "id" : "85336A96",
    "lastKnownWriteTime" : 1426827014,
    "last_content_update" : -2147483648,
    "path" : "//qlsrv/vg502574/Bureau/Programmation/Option TextAnalysis/Projet/sentiment.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}